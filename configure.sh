#!/bin/bash

# MIT License
#
# Copyright (c) 2018 Jesse Haber-Kucharsky
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# This is cmake-cooking v0.3.0
#

set -e

source_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

generator="Ninja"
recipe=""
build_dir="${source_dir}/build"
cmake_dir="${source_dir}/cmake"

usage() {
    echo "Usage: $0 [-r RECIPE] [-g GENERATOR (=${generator})] -d BUILD_DIR (=${build_dir}) [-h]" 1>&2
}

while getopts "r:g:d:h" arg; do
    case "${arg}" in
        r) recipe=${OPTARG} ;;
        g) generator=${OPTARG} ;;
        d) build_dir=${OPTARG} ;;
        h) usage; exit 0 ;;
        *) usage; exit 1 ;;
    esac
done

shift $((OPTIND - 1))

mkdir -p "${cmake_dir}"

cat <<'EOF' > "${cmake_dir}/Cooking.cmake"
# This file was generated by cmake-cooking v0.3.0.
# cmake-cooking is copyright 2018 by Jesse Haber-Kucharsky and
# available under the terms of the MIT license.

macro (project name)
  if (${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
    set (root ON)
  else ()
    set (root OFF)
  endif ()

  option ("Cooking_${name}_ROOT_PROJECT"
    "Configure ${name} as the root project of a CMake tree."
    ${root})

  set (Cooking_RECIPE "" CACHE STRING "Configure ${name}'s dependencies according to the named recipe.")

  if (root)
    _project (${name} ${ARGN})

    if (NOT ("${Cooking_RECIPE}" STREQUAL ""))
      add_custom_target (ingredients
        ALL
        COMMAND cmake -E touch ${CMAKE_CURRENT_BINARY_DIR}/ready.txt)

      set (ingredients_dir ${CMAKE_CURRENT_BINARY_DIR}/installed_ingredients)
      list (APPEND CMAKE_PREFIX_PATH ${ingredients_dir})
      include ("recipe/${Cooking_RECIPE}.cmake")

      if (NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/ready.txt)
        return ()
      endif ()
    endif ()
  endif ()
endmacro ()

macro (cooking_ingredient name)
  set (args "${ARGN}")

  if (SOURCE_DIR IN_LIST args)
    set (source_dir "")
  else ()
    set (source_dir SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/${name}_src)
  endif ()

  include (ExternalProject)

  ExternalProject_add (ingredient_${name}
    ${source_dir}
    BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${name}_build
    INSTALL_DIR ${ingredients_dir}
    "${ARGN}")

  add_dependencies (ingredients ingredient_${name})
endmacro ()
EOF

mkdir -p "${build_dir}"
cd "${build_dir}"

if [ -n "${recipe}" ]; then
    cmake -DCooking_RECIPE="${recipe}" "${@}" -G "${generator}" "${source_dir}"
    cmake --build .
    cmake .
else
    cmake "${@}" -G "${generator}" "${source_dir}"
fi
